/*
  Helium Send And Receive
  This sketch demonstrates how to send and receive data with the MKR WAN 1300/1310 LoRa module.
  This example code is in the public domain.
  note: Helium must be setup for what it does with the CayenneLPP encoded data
*/

#include <MKRWAN.h>
#include <CayenneLPP.h>


LoRaModem modem;
CayenneLPP lpp(51);
bool connected = false;
bool myWaitForDownlink = false;
bool myDownLink = false;

unsigned long myStoredMillisA;
unsigned long myStoredMillisB;
const unsigned long myTimerDurationA = 30000;  // delay between sending data
const unsigned long myTimerDurationB = 5000;   // delay to wait for a downlink



// Please enter your sensitive data in the Secret tab or arduino_secrets.h
// Note: Best to have the App_Device hard coded. Run the program once to see the value.
//#include "arduino_secrets.h"
#define SECRET_APP_EUI "6081F905514BB81C" 
#define SECRET_APP_KEY "3FA07E1021F610E14E36E4676B505EE8"


String appEui = SECRET_APP_EUI;   // just strings of the above 
String appKey = SECRET_APP_KEY;


void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  pinMode(LEDR,OUTPUT);
  pinMode(LEDG,OUTPUT);
  pinMode(LEDB,OUTPUT);
  digitalWrite(LEDR, HIGH); // new boards HIGH = off
  digitalWrite(LEDG, LOW);
  digitalWrite(LEDB, HIGH);
  
  //while (!Serial);       // don't wait for serial
  
  Serial.println("Wait 4");
  delay(3000);             // delay instead, so it works when disconnected
  digitalWrite(LEDG, HIGH);// allows time to connect serial monitor

  Serial.println("Wait 3");
  delay(3000);       
  digitalWrite(LEDG, LOW);
 
  Serial.println("Wait 2");
  delay(3000);       
  digitalWrite(LEDG, HIGH);

  Serial.println("Wait 1");
  delay(3000);       
  digitalWrite(LEDG, LOW);



  
  // change this to your regional band (eg. US915, AS923, ...)
  if (!modem.begin(US915)) {
    Serial.println("Failed to start module");
    while (1) {}
  };
 
  Serial.print("Your module version is: ");
  Serial.println(modem.version());
  Serial.print("Your device EUI is: ");
  Serial.println(modem.deviceEUI());

  Serial.println("Now Disabling all channels and enable channel 1 only for Helium ");

  modem.disableChannel(0);
  modem.enableChannel(1);    // only one enabled for Helium
  modem.disableChannel(2);
  modem.disableChannel(3);
  modem.disableChannel(4);
  modem.disableChannel(5);
  modem.disableChannel(6);
  delay(5000);
  Serial.println("Now Joining the Helium Network ");

}

void loop() {

  while (!connected) {
    Serial.println("trying to reconnect");
    digitalWrite(LEDR, HIGH); // new boards HIGH = off
    digitalWrite(LEDG, LOW);
    digitalWrite(LEDB, LOW);
    connected = modem.joinOTAA(appEui, appKey);
    delay(5000);    // wait a bit 
    digitalWrite(LEDR, HIGH); // new boards HIGH = off
    digitalWrite(LEDG, LOW);
    digitalWrite(LEDB, HIGH);
    delay(1000);   // just wait so the LED flash is visible
  }

   if (myWaitForDownlink){
      myStoredMillisB = millis(); // so not sending while waiting
      char rcv[64];
      int i = 0;
      while (modem.available()) {
        rcv[i++] = (char)modem.read();
        myDownLink = true;
      }

       if (millis() - myStoredMillisB >= myTimerDurationB){  // Test whether the period has elapsed
         myStoredMillisB = millis();  
         if (!modem.available()) {
             Serial.println("No downlink message received at this time.");
             myWaitForDownlink = false;
         }
      }
      

      if (myDownLink) {
        myWaitForDownlink = false;
        myDownLink = false;
        Serial.print("Received: ");
        for (unsigned int j = 0; j < i; j++) {
          Serial.print(rcv[j] >> 4, HEX);
          Serial.print(rcv[j] & 0xF, HEX);
          Serial.print(" ");
        }
        Serial.println();
        digitalWrite(LEDR, LOW); // new boards HIGH = off
        digitalWrite(LEDG, HIGH);
        digitalWrite(LEDB, LOW);

      }
         
    }


  if (millis() - myStoredMillisA >= myTimerDurationA){  // Test whether the period has elapsed
    myStoredMillisA = millis();                         // IMPORTANT to save the next stored time 


    
      lpp.reset();
      float x = rand() / 10000000.0; //analogRead(A0)
      
      
      String myMessage = "ABCDE" + String(x,0); 
      Serial.println();
      Serial.println("Sending: " + myMessage);
      
      int err;
      modem.beginPacket();
      // modem.write(lpp.getBuffer(), lpp.getSize());     
       modem.write(myMessage);

      
      err = modem.endPacket(true);
      if (err > 0) {
        Serial.println("Message sent correctly!");
        digitalWrite(LEDR, HIGH); // new boards HIGH = off
        digitalWrite(LEDG, HIGH);
        digitalWrite(LEDB, LOW);
      } else {
        Serial.println("Error sending message :(");
        Serial.println("(you may send a limited amount of messages per minute, depending on the signal strength");
        Serial.println("it may vary from 1 message every couple of seconds to 1 message every minute)");
        digitalWrite(LEDR, LOW); // new boards HIGH = off
        digitalWrite(LEDG, LOW);
        digitalWrite(LEDB, HIGH);
      }
      myStoredMillisB = millis();
      myWaitForDownlink = true;
      //delay(1000);


     // delay(30000);  // delay 30 seconds for testing
     
  }  // end timerA

}


