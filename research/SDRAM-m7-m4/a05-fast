#include "mbed.h"
#include "Arduino.h"

using namespace mbed;
using namespace rtos;

//#define SRAM3_START_ADDRESS       ((uint32_t) 0x30040000)  // you could use this!
  #define SRAM4_START_ADDRESS       ((uint32_t) 0x38001000)


struct mySharedStruct{
  int M4toM7;
  int M7toM4;
};


int localm7m4 = 0;
int localm4m7 = 0;

// Using AHB SRAM4 at 0x38001000
static struct mySharedStruct * const mySharedPointer = (struct mySharedStruct *) SRAM4_START_ADDRESS;

#ifdef CORE_CM7    // Start M7 Core programming

Thread M7Thread;

void setup()
{
  bootM4();
  Serial.begin(115200);
  while (!Serial);

  Serial.println(F("\nStarting M7_M4_sharemem_SRAM on Portenta_H7"));
  Serial.print(F("Using SRAM4 @ 0x")); 
  Serial.println(SRAM4_START_ADDRESS, HEX);

  M7Thread.start(callback(M7ThreadFunc));
}

void M7ThreadFunc(){

  while (true){

    localm7m4++;
    mySharedPointer -> M7toM4 = localm7m4;

    Serial.print("M7 to M4: "); 
    Serial.print(mySharedPointer -> M7toM4);
    Serial.print(", M4 to M7: "); 
    Serial.println(mySharedPointer -> M4toM7);

    delay(100);
  }
}

void loop(){
  delay(100);
}

#endif

//////////////////////////////////////////////////////////

#ifdef CORE_CM4    // Start M4 Core programming

Thread M4Thread;

void setup(){

  M4Thread.start( callback(M4ThreadFunc) );
  
}

void M4ThreadFunc(){
  
  while (true){
    localm4m7++;
    mySharedPointer -> M4toM7 = localm4m7;
    delay(100);
  }
}

void loop(){


}

#endif
