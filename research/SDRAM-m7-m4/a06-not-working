#include "mbed.h"
#include "Arduino.h"

using namespace mbed;
using namespace rtos;

//#define SRAM3_START_ADDRESS       ((uint32_t) 0x30040000)
  #define SRAM4_START_ADDRESS       ((uint32_t) 0x38001000)


struct mySharedStruct{
  int myIntM4;
  int myIntM7;
};

int myCountM7 = 0;
int myCountM4 = 0;


  // Using AHB SRAM4 at 0x38001000
  static struct mySharedStruct * const myRamObject = (struct mySharedStruct *) SRAM4_START_ADDRESS;

/////////////////////////////////////////////////////////////

#ifdef CORE_CM7    // Start M7 Core programming

Thread myThreadM7;

void setup(){
  bootM4();

  Serial.begin(115200);
  while (!Serial);

  Serial.println(F("\nStarting M7_M4_sharemem_SRAM on Portenta_H7"));
  Serial.print(F("Using SRAM4 @ 0x")); Serial.println(SRAM4_START_ADDRESS, HEX);


  myThreadM7.start(callback(myThreadM7Func));
}

void myThreadM7Func(){
  
  while (true){


    myRamObject -> myIntM7 = myCountM7;
    myCountM7++;
    Serial.print("M7 to M4: "); 
    Serial.print(myRamObject -> myIntM7);
    Serial.print(", M4 to M7: "); 
    Serial.println(myRamObject -> myIntM4);

    delay(100);
  }
}

void loop()
{
  delay(100);
}

#endif

//////////////////////////////////////////////////////////

#ifdef CORE_CM4    // Start M4 Core programming

Thread myThreadM4;

void setup(){


  myThreadM4.start(callback(myThreadM4Func));
}

void myThreadM4Func(){

  
  while (true){

    myRamObject -> myIntM4 = myCountM4;
    myCountM4++;

    delay(100);
  }
}

void loop(){

}

#endif
