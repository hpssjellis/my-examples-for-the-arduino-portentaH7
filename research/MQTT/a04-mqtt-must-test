/*
  ArduinoMqttClient - WiFi Simple Sender
  This example connects to a MQTT broker and publishes a message to
  a topic once a second.
  The circuit:
  - Arduino MKR 1000, MKR 1010 or Uno WiFi Rev.2 board
  This example code is in the public domain.
*/
#include <WiFi.h>
#include <ArduinoMqttClient.h>


///////please enter your sensitive data in the Secret tab/arduino_secrets.h
#include "arduino_secrets.h"
//#define SECRET_SSID   "ssid"
//#define SECRET_PASS   "password"
//#define MQTT_username "username"  // for adafruit get from their MY KEY area
//#define MQTT_aio_key  "aio_key"



char ssid[] = SECRET_SSID;    // takes arduino_secrets and puts it into a char array  
char pass[] = SECRET_PASS;      
  

// To connect with SSL/TLS:
// 1) Change WiFiClient to WiFiSSLClient.
// 2) Change port value from 1883 to 8883.
// 3) Change broker value to a server with a known SSL/TLS root certificate 
//    flashed in the WiFi module.

WiFiClient wifiClient;
MqttClient mqttClient(wifiClient);

const char broker[] = "io.adafruit.com";
int        port     = 1883;
const char topic[]  = "feeds/photocell";

const long interval = 30000;   // every 30 seconds
unsigned long previousMillis = 0;

int count = 0;

void setup() {
  //Initialize serial and wait for port to open:
  Serial.begin(15200);
   pinMode(LEDR, OUTPUT);
   pinMode(LEDG, OUTPUT);
   pinMode(LEDB, OUTPUT);
   digitalWrite(LEDR, HIGH);  // high off for new boards
   digitalWrite(LEDG, LOW);  
   digitalWrite(LEDB, HIGH); 
 // while (!Serial) {;}   // super confusing if disconnected from serial
  Serial.println("Wait 3");
  delay(5000);
  Serial.println("Wait 2");
  delay(5000);
  Serial.println("Wait 1");
  delay(5000);
  digitalWrite(LEDG, HIGH);  
 
  // attempt to connect to Wifi network:
  Serial.print("Attempting to connect to WPA SSID: ");
  Serial.println(ssid);
  while (WiFi.begin(ssid, pass) != WL_CONNECTED) {
    // failed, retry
    digitalWrite(LEDG, LOW);  
    Serial.print(".");
    delay(2000);
    digitalWrite(LEDG, HIGH);
    delay(2000);  
  }
   digitalWrite(LEDR, HIGH);  // high off for new boards
   digitalWrite(LEDG, HIGH);  
   digitalWrite(LEDB, LOW); 
  Serial.println("You're connected to the network");
  Serial.println();

  // You can provide a unique client ID, if not set the library uses Arduino-millis()
  // Each client must have a unique client ID
  // mqttClient.setId("clientId");

  // You can provide a username and password for authentication
   mqttClient.setUsernamePassword(MQTT_username, MQTT_aio_key);

  Serial.print("Attempting to connect to the MQTT broker: ");
  Serial.println(broker);

  if (!mqttClient.connect(broker, port)) {
    Serial.print("MQTT connection failed! Error code = ");
    Serial.println(mqttClient.connectError());

    while (1);
  }

  Serial.println("You're connected to the MQTT broker!");
  Serial.println();
}

void loop() {
  // call poll() regularly to allow the library to send MQTT keep alives which
  // avoids being disconnected by the broker
  mqttClient.poll();

  // avoid having delays in loop, we'll use the strategy from BlinkWithoutDelay
  // see: File -> Examples -> 02.Digital -> BlinkWithoutDelay for more info
  unsigned long currentMillis = millis();
  
  if (currentMillis - previousMillis >= interval) {
    // save the last time a message was sent
    previousMillis = currentMillis;
    float x = rand() / 10000000.0; 
    Serial.print("Sending message to topic: ");
    Serial.println(topic);
    Serial.print(String(x, 3));
    Serial.println(count);

    // send message, the Print interface can be used to set the message contents
    mqttClient.beginMessage(topic);
    mqttClient.print(String(x, 3));
    mqttClient.print(count);
    mqttClient.endMessage();

    Serial.println();
    digitalWrite(LEDB, HIGH);
    delay(200);
    digitalWrite(LEDB, LOW);
    count++;
  }
}
